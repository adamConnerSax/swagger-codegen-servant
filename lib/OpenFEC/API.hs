{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE ViewPatterns #-}
{-# OPTIONS_GHC
-fno-warn-unused-binds -fno-warn-unused-imports -fcontext-stack=328 #-}

module OpenFEC.API
  -- * Client and Server
  ( ServerConfig(..)
  , OpenFECBackend
  , createOpenFECClient
  , runOpenFECServer
  , runOpenFECClient
  , runOpenFECClientWithManager
  , OpenFECClient
  -- ** Servant
  , OpenFECAPI
  ) where

import OpenFEC.Types

import Control.Monad.Except (ExceptT)
import Control.Monad.IO.Class
import Data.Aeson (Value)
import Data.Coerce (coerce)
import Data.Function ((&))
import qualified Data.Map as Map
import Data.Monoid ((<>))
import Data.Proxy (Proxy(..))
import Data.Text (Text)
import qualified Data.Text as T
import GHC.Exts (IsString(..))
import GHC.Generics (Generic)
import Network.HTTP.Client (Manager, defaultManagerSettings, newManager)
import Network.HTTP.Types.Method (methodOptions)
import qualified Network.Wai.Handler.Warp as Warp
import Servant (ServantErr, serve)
import Servant.API
import Servant.API.Verbs (StdMethod(..), Verb)
import Servant.Client (Scheme(Http), ServantError, client)
import Servant.Common.BaseUrl (BaseUrl(..))
import Web.HttpApiData




-- For the form data code generation.
lookupEither :: FromHttpApiData b => Text -> [(Text, Text)] -> Either String b
lookupEither key assocs =
  case lookup key assocs of
    Nothing -> Left $ "Could not find parameter " <> (T.unpack key) <> " in form data"
    Just value ->
      case parseQueryParam value of
        Left result -> Left $ T.unpack result
        Right result -> Right $ result

-- | Servant type-level API, generated from the Swagger spec for OpenFEC.
type OpenFECAPI
    =    "audit-case" :> QueryParam "committee_designation" Text :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "q" (QueryList 'MultiParamArray (Text)) :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "primary_category_id" Text :> QueryParam "max_election_cycle" Int :> QueryParam "qq" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sub_category_id" Text :> QueryParam "audit_id" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "min_election_cycle" Int :> QueryParam "sort_hide_null" Bool :> QueryParam "per_page" Int :> QueryParam "audit_case_id" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] AuditCasePage -- 'auditCaseGet' route
    :<|> "audit-category" :> QueryParam "primary_category_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "primary_category_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] AuditCategoryPage -- 'auditCategoryGet' route
    :<|> "audit-primary-category" :> QueryParam "primary_category_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "primary_category_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] AuditPrimaryCategoryPage -- 'auditPrimaryCategoryGet' route
    :<|> "names" :> "audit_candidates" :> QueryParam "q" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> Verb 'GET 200 '[JSON] AuditCandidateSearchList -- 'namesAuditCandidatesGet' route
    :<|> "names" :> "audit_committees" :> QueryParam "q" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> Verb 'GET 200 '[JSON] AuditCommitteeSearchList -- 'namesAuditCommitteesGet' route
    :<|> "candidate" :> Capture "candidate_id" Text :> QueryParam "per_page" Int :> QueryParam "district" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "federal_funds_flag" Bool :> QueryParam "sort_null_only" Bool :> QueryParam "name" (QueryList 'MultiParamArray (Text)) :> QueryParam "office" (QueryList 'MultiParamArray (Text)) :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "incumbent_challenge" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "year" Text :> QueryParam "page" Int :> QueryParam "election_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_status" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "has_raised_funds" Bool :> QueryParam "party" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] CandidateDetailPage -- 'candidateCandidateIdGet' route
    :<|> "candidate" :> Capture "candidate_id" Text :> "history" :> Capture "cycle" Int :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "api_key" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CandidateHistoryPage -- 'candidateCandidateIdHistoryCycleGet' route
    :<|> "candidate" :> Capture "candidate_id" Text :> "history" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "api_key" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CandidateHistoryPage -- 'candidateCandidateIdHistoryGet' route
    :<|> "candidate" :> Capture "candidate_id" Text :> "totals" :> QueryParam "sort" Text :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "full_election" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "designation" Text :> QueryParam "per_page" Int :> QueryParam "type" Text :> Verb 'GET 200 '[JSON] CommitteeTotalsPage -- 'candidateCandidateIdTotalsGet' route
    :<|> "candidates" :> QueryParam "per_page" Int :> QueryParam "district" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "federal_funds_flag" Bool :> QueryParam "sort_null_only" Bool :> QueryParam "name" (QueryList 'MultiParamArray (Text)) :> QueryParam "office" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "q" (QueryList 'MultiParamArray (Text)) :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "party" (QueryList 'MultiParamArray (Text)) :> QueryParam "incumbent_challenge" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_first_file_date" Date :> QueryParam "sort" Text :> QueryParam "year" Text :> QueryParam "page" Int :> QueryParam "election_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_status" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_first_file_date" Date :> QueryParam "has_raised_funds" Bool :> QueryParam "sort_hide_null" Bool :> Verb 'GET 200 '[JSON] CandidatePage -- 'candidatesGet' route
    :<|> "candidates" :> "search" :> QueryParam "per_page" Int :> QueryParam "district" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "federal_funds_flag" Bool :> QueryParam "sort_null_only" Bool :> QueryParam "name" (QueryList 'MultiParamArray (Text)) :> QueryParam "office" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "q" (QueryList 'MultiParamArray (Text)) :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "party" (QueryList 'MultiParamArray (Text)) :> QueryParam "incumbent_challenge" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_first_file_date" Date :> QueryParam "sort" Text :> QueryParam "year" Text :> QueryParam "page" Int :> QueryParam "election_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_status" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_first_file_date" Date :> QueryParam "has_raised_funds" Bool :> QueryParam "sort_hide_null" Bool :> Verb 'GET 200 '[JSON] CandidatePage -- 'candidatesSearchGet' route
    :<|> "candidates" :> "totals" :> QueryParam "per_page" Int :> QueryParam "district" (QueryList 'MultiParamArray (Text)) :> QueryParam "election_full" Bool :> QueryParam "api_key" Text :> QueryParam "max_disbursements" Text :> QueryParam "sort_null_only" Bool :> QueryParam "federal_funds_flag" Bool :> QueryParam "min_receipts" Text :> QueryParam "office" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_cash_on_hand_end_period" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "q" (QueryList 'MultiParamArray (Text)) :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "min_disbursements" Text :> QueryParam "sort" Text :> QueryParam "max_debts_owed_by_committee" Text :> QueryParam "min_debts_owed_by_committee" Text :> QueryParam "page" Int :> QueryParam "election_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_receipts" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "has_raised_funds" Bool :> QueryParam "max_cash_on_hand_end_period" Text :> QueryParam "party" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] CandidateHistoryTotalPage -- 'candidatesTotalsGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "candidates" :> QueryParam "per_page" Int :> QueryParam "district" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "federal_funds_flag" Bool :> QueryParam "sort_null_only" Bool :> QueryParam "name" (QueryList 'MultiParamArray (Text)) :> QueryParam "office" (QueryList 'MultiParamArray (Text)) :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "incumbent_challenge" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "year" Text :> QueryParam "page" Int :> QueryParam "election_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_status" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "has_raised_funds" Bool :> QueryParam "party" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] CandidateDetailPage -- 'committeeCommitteeIdCandidatesGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "candidates" :> "history" :> Capture "cycle" Int :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "api_key" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CandidateHistoryPage -- 'committeeCommitteeIdCandidatesHistoryCycleGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "candidates" :> "history" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "api_key" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CandidateHistoryPage -- 'committeeCommitteeIdCandidatesHistoryGet' route
    :<|> "candidate" :> Capture "candidate_id" Text :> "committees" :> QueryParam "sort" Text :> QueryParam "committee_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "filing_frequency" (QueryList 'MultiParamArray (Text)) :> QueryParam "year" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort_hide_null" Bool :> QueryParam "organization_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "designation" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommitteeDetailPage -- 'candidateCandidateIdCommitteesGet' route
    :<|> "candidate" :> Capture "candidate_id" Text :> "committees" :> "history" :> Capture "cycle" Int :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "api_key" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommitteeHistoryPage -- 'candidateCandidateIdCommitteesHistoryCycleGet' route
    :<|> "candidate" :> Capture "candidate_id" Text :> "committees" :> "history" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "api_key" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommitteeHistoryPage -- 'candidateCandidateIdCommitteesHistoryGet' route
    :<|> "committee" :> Capture "committee_id" Text :> QueryParam "sort" Text :> QueryParam "committee_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "filing_frequency" (QueryList 'MultiParamArray (Text)) :> QueryParam "year" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort_hide_null" Bool :> QueryParam "organization_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "designation" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommitteeDetailPage -- 'committeeCommitteeIdGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "history" :> Capture "cycle" Int :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "api_key" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommitteeHistoryPage -- 'committeeCommitteeIdHistoryCycleGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "history" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "api_key" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommitteeHistoryPage -- 'committeeCommitteeIdHistoryGet' route
    :<|> "committees" :> QueryParam "filing_frequency" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> QueryParam "min_last_f1_date" Date :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "max_last_f1_date" Date :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "q" (QueryList 'MultiParamArray (Text)) :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "organization_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "party" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "max_first_file_date" Date :> QueryParam "year" (QueryList 'MultiParamArray (Int)) :> QueryParam "committee_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_first_file_date" Date :> QueryParam "designation" (QueryList 'MultiParamArray (Text)) :> QueryParam "treasurer_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> Verb 'GET 200 '[JSON] CommitteePage -- 'committeesGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "communication_costs" :> "by_candidate" :> QueryParam "sort" Text :> QueryParam "support_oppose" Text :> QueryParam "district" Text :> QueryParam "election_full" Bool :> QueryParam "page" Int :> QueryParam "state" Text :> QueryParam "sort_null_only" Bool :> QueryParam "api_key" Text :> QueryParam "office" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommunicationCostByCandidatePage -- 'committeeCommitteeIdCommunicationCostsByCandidateGet' route
    :<|> "communication_costs" :> "by_candidate" :> QueryParam "sort" Text :> QueryParam "support_oppose" Text :> QueryParam "district" Text :> QueryParam "election_full" Bool :> QueryParam "page" Int :> QueryParam "state" Text :> QueryParam "sort_null_only" Bool :> QueryParam "api_key" Text :> QueryParam "office" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommunicationCostByCandidatePage -- 'communicationCostsByCandidateGet' route
    :<|> "communication-costs" :> QueryParam "max_date" Date :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "support_oppose_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "max_image_number" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_amount" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "page" Int :> QueryParam "min_amount" Text :> QueryParam "line_number" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "min_image_number" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommunicationCostPage -- 'communicationCostsGet' route
    :<|> "calendar-dates" :> "export" :> QueryParam "sort" Text :> QueryParam "renderer" Text :> QueryParam "description" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_end_date" Integer :> QueryParam "min_end_date" Integer :> QueryParam "max_start_date" Integer :> QueryParam "calendar_category_id" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "min_start_date" Integer :> QueryParam "sort_hide_null" Bool :> QueryParam "summary" (QueryList 'MultiParamArray (Text)) :> QueryParam "event_id" Int :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CalendarDatePage -- 'calendarDatesExportGet' route
    :<|> "calendar-dates" :> QueryParam "sort" Text :> QueryParam "min_end_date" Integer :> QueryParam "max_end_date" Integer :> QueryParam "description" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> QueryParam "page" Int :> QueryParam "calendar_category_id" (QueryList 'MultiParamArray (Int)) :> QueryParam "max_start_date" Integer :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "summary" (QueryList 'MultiParamArray (Text)) :> QueryParam "event_id" Int :> QueryParam "min_start_date" Integer :> Verb 'GET 200 '[JSON] CalendarDatePage -- 'calendarDatesGet' route
    :<|> "election-dates" :> QueryParam "api_key" Text :> QueryParam "max_create_date" Date :> QueryParam "sort_null_only" Bool :> QueryParam "election_type_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_primary_general_date" Date :> QueryParam "min_primary_general_date" Date :> QueryParam "min_create_date" Date :> QueryParam "election_party" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "election_state" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_update_date" Date :> QueryParam "max_election_date" Date :> QueryParam "office_sought" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "min_election_date" Date :> QueryParam "election_year" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "election_district" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_update_date" Date :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] Inline_response_default -- 'electionDatesGet' route
    :<|> "reporting-dates" :> QueryParam "sort" Text :> QueryParam "min_update_date" Date :> QueryParam "max_due_date" Date :> QueryParam "page" Int :> QueryParam "report_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "max_create_date" Date :> QueryParam "report_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "api_key" Text :> QueryParam "min_due_date" Date :> QueryParam "sort_hide_null" Bool :> QueryParam "min_create_date" Date :> QueryParam "max_update_date" Date :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] Inline_response_default_2 -- 'reportingDatesGet' route
    :<|> "schedules" :> "schedule_d" :> QueryParam "nature_of_debt" Text :> QueryParam "max_payment_period" Float :> QueryParam "max_date" Date :> QueryParam "min_amount_incurred" Float :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "max_image_number" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_amount" Text :> QueryParam "max_amount_incurred" Float :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "creditor_debtor_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "min_amount" Text :> QueryParam "line_number" Text :> QueryParam "min_payment_period" Float :> QueryParam "sort_hide_null" Bool :> QueryParam "min_image_number" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] Inline_response_default_4 -- 'schedulesScheduleDGet' route
    :<|> "schedules" :> "schedule_d" :> Capture "sub_id" Text :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] Inline_response_default_4 -- 'schedulesScheduleDSubIdGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "schedules" :> "schedule_b" :> "by_purpose" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort_hide_null" Bool :> QueryParam "purpose" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleBByPurposePage -- 'committeeCommitteeIdSchedulesScheduleBByPurposeGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "schedules" :> "schedule_b" :> "by_recipient" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "recipient_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleBByRecipientPage -- 'committeeCommitteeIdSchedulesScheduleBByRecipientGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "schedules" :> "schedule_b" :> "by_recipient_id" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort_hide_null" Bool :> QueryParam "recipient_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleBByRecipientIDPage -- 'committeeCommitteeIdSchedulesScheduleBByRecipientIdGet' route
    :<|> "schedules" :> "schedule_b" :> "by_purpose" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort_hide_null" Bool :> QueryParam "purpose" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleBByPurposePage -- 'schedulesScheduleBByPurposeGet' route
    :<|> "schedules" :> "schedule_b" :> "by_recipient" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "recipient_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleBByRecipientPage -- 'schedulesScheduleBByRecipientGet' route
    :<|> "schedules" :> "schedule_b" :> "by_recipient_id" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort_hide_null" Bool :> QueryParam "recipient_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleBByRecipientIDPage -- 'schedulesScheduleBByRecipientIdGet' route
    :<|> "schedules" :> "schedule_b" :> "efile" :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "max_date" Date :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "recipient_city" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "min_amount" Text :> QueryParam "min_date" Date :> QueryParam "sort_null_only" Bool :> QueryParam "disbursement_description" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "recipient_state" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_amount" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleBEfilePage -- 'schedulesScheduleBEfileGet' route
    :<|> "schedules" :> "schedule_b" :> QueryParam "spender_committee_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "last_index" Int :> QueryParam "max_date" Date :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "recipient_city" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "last_disbursement_amount" Float :> QueryParam "max_image_number" Text :> QueryParam "max_amount" Text :> QueryParam "disbursement_purpose_category" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "min_amount" Text :> QueryParam "recipient_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "line_number" Text :> QueryParam "two_year_transaction_period" Int :> QueryParam "recipient_committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "last_disbursement_date" Date :> QueryParam "disbursement_description" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "recipient_state" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_image_number" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleBPage -- 'schedulesScheduleBGet' route
    :<|> "schedules" :> "schedule_b" :> Capture "sub_id" Text :> QueryParam "spender_committee_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "last_index" Int :> QueryParam "max_date" Date :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "recipient_city" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "last_disbursement_amount" Float :> QueryParam "max_image_number" Text :> QueryParam "max_amount" Text :> QueryParam "disbursement_purpose_category" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "min_amount" Text :> QueryParam "recipient_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "line_number" Text :> QueryParam "two_year_transaction_period" Int :> QueryParam "recipient_committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "last_disbursement_date" Date :> QueryParam "disbursement_description" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "recipient_state" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_image_number" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleBPage -- 'schedulesScheduleBSubIdGet' route
    :<|> "efile" :> "filings" :> QueryParam "file_number" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_receipt_date" Integer :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "max_receipt_date" Integer :> QueryParam "sort_hide_null" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] EFilingsPage -- 'efileFilingsGet' route
    :<|> "efile" :> "reports" :> "house-senate" :> QueryParam "file_number" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_receipt_date" Integer :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "max_receipt_date" Integer :> QueryParam "sort_hide_null" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] BaseF3FilingPage -- 'efileReportsHouseSenateGet' route
    :<|> "efile" :> "reports" :> "pac-party" :> QueryParam "file_number" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_receipt_date" Integer :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "max_receipt_date" Integer :> QueryParam "sort_hide_null" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] BaseF3XFilingPage -- 'efileReportsPacPartyGet' route
    :<|> "efile" :> "reports" :> "presidential" :> QueryParam "file_number" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_receipt_date" Integer :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "max_receipt_date" Integer :> QueryParam "sort_hide_null" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] BaseF3PFilingPage -- 'efileReportsPresidentialGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "electioneering" :> "by_candidate" :> QueryParam "sort" Text :> QueryParam "district" Text :> QueryParam "election_full" Bool :> QueryParam "page" Int :> QueryParam "state" Text :> QueryParam "sort_null_only" Bool :> QueryParam "api_key" Text :> QueryParam "office" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ElectioneeringByCandidatePage -- 'committeeCommitteeIdElectioneeringByCandidateGet' route
    :<|> "electioneering" :> "by_candidate" :> QueryParam "sort" Text :> QueryParam "district" Text :> QueryParam "election_full" Bool :> QueryParam "page" Int :> QueryParam "state" Text :> QueryParam "sort_null_only" Bool :> QueryParam "api_key" Text :> QueryParam "office" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ElectioneeringByCandidatePage -- 'electioneeringByCandidateGet' route
    :<|> "electioneering" :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "last_index" Int :> QueryParam "max_date" Date :> QueryParam "description" Text :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "min_amount" Text :> QueryParam "min_date" Date :> QueryParam "sort_null_only" Bool :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "max_amount" Text :> QueryParam "report_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ElectioneeringPage -- 'electioneeringGet' route
    :<|> "rad-analyst" :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "email" (QueryList 'MultiParamArray (Text)) :> QueryParam "analyst_id" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "telephone_ext" (QueryList 'MultiParamArray (Int)) :> QueryParam "max_assignment_update_date" Date :> QueryParam "analyst_short_id" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort_null_only" Bool :> QueryParam "name" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "min_assignment_update_date" Date :> QueryParam "title" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] RadAnalystPage -- 'radAnalystGet' route
    :<|> "state-election-office" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> QueryParam "state" Text :> Verb 'GET 200 '[JSON] StateElectionOfficeInfoPage -- 'stateElectionOfficeGet' route
    :<|> "candidate" :> Capture "candidate_id" Text :> "filings" :> QueryParam "beginning_image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "is_amended" Bool :> QueryParam "min_receipt_date" Date :> QueryParam "per_page" Int :> QueryParam "district" (QueryList 'MultiParamArray (Text)) :> QueryParam "most_recent" Bool :> QueryParam "api_key" Text :> QueryParam "report_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "office" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_receipt_date" Date :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "report_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "filer_type" Text :> QueryParam "document_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "file_number" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_type" Text :> QueryParam "primary_general_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "request_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "amendment_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "form_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "party" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] FilingsPage -- 'candidateCandidateIdFilingsGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "filings" :> QueryParam "beginning_image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "is_amended" Bool :> QueryParam "min_receipt_date" Date :> QueryParam "per_page" Int :> QueryParam "district" (QueryList 'MultiParamArray (Text)) :> QueryParam "most_recent" Bool :> QueryParam "api_key" Text :> QueryParam "report_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "office" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_receipt_date" Date :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "report_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "filer_type" Text :> QueryParam "document_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "file_number" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_type" Text :> QueryParam "primary_general_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "request_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "amendment_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "form_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "party" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] FilingsPage -- 'committeeCommitteeIdFilingsGet' route
    :<|> "filings" :> QueryParam "beginning_image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "is_amended" Bool :> QueryParam "min_receipt_date" Date :> QueryParam "per_page" Int :> QueryParam "district" (QueryList 'MultiParamArray (Text)) :> QueryParam "most_recent" Bool :> QueryParam "api_key" Text :> QueryParam "report_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "office" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_receipt_date" Date :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "report_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "filer_type" Text :> QueryParam "document_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" (QueryList 'MultiParamArray (Text)) :> QueryParam "file_number" (QueryList 'MultiParamArray (Int)) :> QueryParam "committee_type" Text :> QueryParam "primary_general_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "request_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "amendment_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "form_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "party" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] FilingsPage -- 'filingsGet' route
    :<|> "operations-log" :> QueryParam "sort" (QueryList 'MultiParamArray (Text)) :> QueryParam "beginning_image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "status_num" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "report_year" (QueryList 'MultiParamArray (Int)) :> QueryParam "api_key" Text :> QueryParam "report_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "amendment_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "form_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] OperationsLogPage -- 'operationsLogGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "reports" :> QueryParam "min_debts_owed_amount" Text :> QueryParam "min_total_contributions" Text :> QueryParam "beginning_image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_cash_on_hand_end_period_amount" Text :> QueryParam "is_amended" Bool :> QueryParam "max_receipts_amount" Text :> QueryParam "min_receipts_amount" Text :> QueryParam "min_cash_on_hand_end_period_amount" Text :> QueryParam "max_debts_owed_expenditures" Text :> QueryParam "min_disbursements_amount" Text :> QueryParam "max_party_coordinated_expenditures" Text :> QueryParam "report_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "api_key" Text :> QueryParam "candidate_id" Text :> QueryParam "max_disbursements_amount" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "min_independent_expenditures" Text :> QueryParam "sort" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_independent_expenditures" Text :> QueryParam "year" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "min_party_coordinated_expenditures" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "max_total_contributions" Text :> QueryParam "per_page" Int :> QueryParam "type" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] CommitteeReportsPage -- 'committeeCommitteeIdReportsGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "totals" :> QueryParam "sort" Text :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "designation" Text :> QueryParam "per_page" Int :> QueryParam "type" Text :> Verb 'GET 200 '[JSON] CommitteeTotalsPage -- 'committeeCommitteeIdTotalsGet' route
    :<|> "elections" :> QueryParam "sort" Text :> QueryParam "district" Text :> QueryParam "election_full" Bool :> QueryParam "page" Int :> QueryParam "state" Text :> QueryParam "sort_null_only" Bool :> QueryParam "api_key" Text :> QueryParam "office" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" Int :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ElectionPage -- 'electionsGet' route
    :<|> "elections" :> "search" :> QueryParam "sort" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> QueryParam "district" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "office" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "zip" (QueryList 'MultiParamArray (Int)) :> Verb 'GET 200 '[JSON] ElectionsListPage -- 'electionsSearchGet' route
    :<|> "elections" :> "summary" :> QueryParam "office" Text :> QueryParam "cycle" Int :> QueryParam "district" Text :> QueryParam "election_full" Bool :> QueryParam "api_key" Text :> QueryParam "state" Text :> Verb 'GET 200 '[JSON] ElectionSummary -- 'electionsSummaryGet' route
    :<|> "reports" :> Capture "committee_type" Text :> QueryParam "min_total_contributions" Text :> QueryParam "beginning_image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_receipts_amount" Text :> QueryParam "most_recent" Bool :> QueryParam "report_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "candidate_id" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "filer_type" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" (QueryList 'MultiParamArray (Text)) :> QueryParam "year" (QueryList 'MultiParamArray (Int)) :> QueryParam "min_party_coordinated_expenditures" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "amendment_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_total_contributions" Text :> QueryParam "type" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_debts_owed_amount" Text :> QueryParam "max_cash_on_hand_end_period_amount" Text :> QueryParam "is_amended" Bool :> QueryParam "max_debts_owed_expenditures" Text :> QueryParam "min_receipts_amount" Text :> QueryParam "min_receipt_date" Integer :> QueryParam "min_disbursements_amount" Text :> QueryParam "max_party_coordinated_expenditures" Text :> QueryParam "min_cash_on_hand_end_period_amount" Text :> QueryParam "api_key" Text :> QueryParam "max_receipt_date" Integer :> QueryParam "max_disbursements_amount" Text :> QueryParam "max_independent_expenditures" Text :> QueryParam "page" Int :> QueryParam "min_independent_expenditures" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommitteeReportsPage -- 'reportsCommitteeTypeGet' route
    :<|> "totals" :> "by_entity" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" Int :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] EntityReceiptDisbursementTotalsPage -- 'totalsByEntityGet' route
    :<|> "totals" :> Capture "committee_type" Text :> QueryParam "committee_id" Text :> QueryParam "sort" Text :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "committee_type_full" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "committee_designation_full" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] CommitteeTotalsPage -- 'totalsCommitteeTypeGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "schedules" :> "schedule_e" :> "by_candidate" :> QueryParam "sort" Text :> QueryParam "support_oppose" Text :> QueryParam "district" Text :> QueryParam "election_full" Bool :> QueryParam "page" Int :> QueryParam "state" Text :> QueryParam "sort_null_only" Bool :> QueryParam "api_key" Text :> QueryParam "office" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleEByCandidatePage -- 'committeeCommitteeIdSchedulesScheduleEByCandidateGet' route
    :<|> "schedules" :> "schedule_e" :> "by_candidate" :> QueryParam "sort" Text :> QueryParam "support_oppose" Text :> QueryParam "district" Text :> QueryParam "election_full" Bool :> QueryParam "page" Int :> QueryParam "state" Text :> QueryParam "sort_null_only" Bool :> QueryParam "api_key" Text :> QueryParam "office" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleEByCandidatePage -- 'schedulesScheduleEByCandidateGet' route
    :<|> "schedules" :> "schedule_e" :> "efile" :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "max_expenditure_date" Date :> QueryParam "min_expenditure_amount" Date :> QueryParam "min_expenditure_date" Date :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "candidate_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "support_oppose_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "max_expenditure_amount" Date :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "payee_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleEEfilePage -- 'schedulesScheduleEEfileGet' route
    :<|> "schedules" :> "schedule_e" :> QueryParam "last_index" Int :> QueryParam "max_date" Date :> QueryParam "filing_form" (QueryList 'MultiParamArray (Text)) :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> QueryParam "is_notice" (QueryList 'MultiParamArray (Bool)) :> QueryParam "support_oppose_indicator" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "api_key" Text :> QueryParam "candidate_office_state" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_image_number" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "last_expenditure_amount" Float :> QueryParam "max_amount" Text :> QueryParam "payee_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "candidate_office" (QueryList 'MultiParamArray (Text)) :> QueryParam "candidate_office_district" (QueryList 'MultiParamArray (Text)) :> QueryParam "last_office_total_ytd" Float :> QueryParam "last_expenditure_date" Date :> QueryParam "min_amount" Text :> QueryParam "line_number" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "min_image_number" Text :> QueryParam "candidate_party" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] ScheduleEPage -- 'schedulesScheduleEGet' route
    :<|> "legal" :> "search" :> QueryParam "ao_regulatory_citation" (QueryList 'MultiParamArray (Text)) :> QueryParam "case_max_close_date" Date :> QueryParam "af_committee_id" Text :> QueryParam "mur_max_open_date" Date :> QueryParam "mur_document_category" (QueryList 'MultiParamArray (Text)) :> QueryParam "case_respondents" Text :> QueryParam "ao_entity_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "ao_requestor" Text :> QueryParam "ao_min_issue_date" Date :> QueryParam "ao_citation_require_all" Bool :> QueryParam "case_document_category" (QueryList 'MultiParamArray (Text)) :> QueryParam "q" Text :> QueryParam "af_min_rtb_date" Date :> QueryParam "case_election_cycles" Int :> QueryParam "from_hit" Int :> QueryParam "ao_max_issue_date" Date :> QueryParam "af_max_fd_date" Date :> QueryParam "ao_status" Text :> QueryParam "ao_min_request_date" Date :> QueryParam "af_max_rtb_date" Date :> QueryParam "case_no" (QueryList 'MultiParamArray (Text)) :> QueryParam "case_max_open_date" Date :> QueryParam "mur_max_close_date" Date :> QueryParam "hits_returned" Int :> QueryParam "af_report_year" Text :> QueryParam "type" Text :> QueryParam "mur_min_open_date" Date :> QueryParam "af_rtb_fine_amount" Int :> QueryParam "ao_statutory_citation" (QueryList 'MultiParamArray (Text)) :> QueryParam "mur_no" (QueryList 'MultiParamArray (Text)) :> QueryParam "ao_is_pending" Bool :> QueryParam "api_key" Text :> QueryParam "mur_min_close_date" Date :> QueryParam "af_fd_fine_amount" Int :> QueryParam "mur_respondents" Text :> QueryParam "case_dispositions" (QueryList 'MultiParamArray (Text)) :> QueryParam "case_min_close_date" Date :> QueryParam "mur_dispositions" (QueryList 'MultiParamArray (Text)) :> QueryParam "ao_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "ao_max_request_date" Date :> QueryParam "ao_category" (QueryList 'MultiParamArray (Text)) :> QueryParam "ao_requestor_type" (QueryList 'MultiParamArray (Int)) :> QueryParam "mur_election_cycles" Int :> QueryParam "af_min_fd_date" Date :> QueryParam "case_min_open_date" Date :> QueryParam "af_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "ao_no" (QueryList 'MultiParamArray (Text)) :> Verb 'GET 200 '[JSON] Inline_response_default_1 -- 'legalSearchGet' route
    :<|> "schedules" :> "schedule_c" :> QueryParam "max_date" Date :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "max_image_number" Text :> QueryParam "max_amount" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "min_payment_to_date" Int :> QueryParam "page" Int :> QueryParam "candidate_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "loaner_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_amount" Text :> QueryParam "line_number" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "min_image_number" Text :> QueryParam "max_payment_to_date" Int :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] Inline_response_default_3 -- 'schedulesScheduleCGet' route
    :<|> "schedules" :> "schedule_c" :> Capture "sub_id" Text :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] Inline_response_default_3 -- 'schedulesScheduleCSubIdGet' route
    :<|> "schedules" :> "schedule_f" :> QueryParam "max_date" Date :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "max_image_number" Text :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "max_amount" Text :> QueryParam "payee_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "page" Int :> QueryParam "min_amount" Text :> QueryParam "line_number" Text :> QueryParam "sort_hide_null" Bool :> QueryParam "min_image_number" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] Inline_response_default_5 -- 'schedulesScheduleFGet' route
    :<|> "schedules" :> "schedule_f" :> Capture "sub_id" Text :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] Inline_response_default_5 -- 'schedulesScheduleFSubIdGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "schedules" :> "schedule_a" :> "by_employer" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "employer" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByEmployerPage -- 'committeeCommitteeIdSchedulesScheduleAByEmployerGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "schedules" :> "schedule_a" :> "by_occupation" :> QueryParam "occupation" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByOccupationPage -- 'committeeCommitteeIdSchedulesScheduleAByOccupationGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "schedules" :> "schedule_a" :> "by_size" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort_hide_null" Bool :> QueryParam "size" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleABySizePage -- 'committeeCommitteeIdSchedulesScheduleABySizeGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "schedules" :> "schedule_a" :> "by_state" :> QueryParam "sort" Text :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "hide_null" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByStatePage -- 'committeeCommitteeIdSchedulesScheduleAByStateGet' route
    :<|> "committee" :> Capture "committee_id" Text :> "schedules" :> "schedule_a" :> "by_zip" :> QueryParam "sort" Text :> QueryParam "zip" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByZipPage -- 'committeeCommitteeIdSchedulesScheduleAByZipGet' route
    :<|> "schedules" :> "schedule_a" :> "by_employer" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "employer" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByEmployerPage -- 'schedulesScheduleAByEmployerGet' route
    :<|> "schedules" :> "schedule_a" :> "by_occupation" :> QueryParam "occupation" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByOccupationPage -- 'schedulesScheduleAByOccupationGet' route
    :<|> "schedules" :> "schedule_a" :> "by_size" :> "by_candidate" :> QueryParam "sort" Text :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleABySizeCandidatePage -- 'schedulesScheduleABySizeByCandidateGet' route
    :<|> "schedules" :> "schedule_a" :> "by_size" :> QueryParam "sort_null_only" Bool :> QueryParam "sort" Text :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "sort_hide_null" Bool :> QueryParam "size" (QueryList 'MultiParamArray (Int)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleABySizePage -- 'schedulesScheduleABySizeGet' route
    :<|> "schedules" :> "schedule_a" :> "by_state" :> "by_candidate" :> QueryParam "sort" Text :> QueryParam "page" Int :> QueryParam "election_full" Bool :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "candidate_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByStateCandidatePage -- 'schedulesScheduleAByStateByCandidateGet' route
    :<|> "schedules" :> "schedule_a" :> "by_state" :> QueryParam "sort" Text :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "hide_null" Bool :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByStatePage -- 'schedulesScheduleAByStateGet' route
    :<|> "schedules" :> "schedule_a" :> "by_state" :> "totals" :> QueryParam "sort" Text :> QueryParam "committee_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByStateRecipientTotalsPage -- 'schedulesScheduleAByStateTotalsGet' route
    :<|> "schedules" :> "schedule_a" :> "by_zip" :> QueryParam "sort" Text :> QueryParam "zip" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "api_key" Text :> QueryParam "state" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_null_only" Bool :> QueryParam "sort_hide_null" Bool :> QueryParam "cycle" (QueryList 'MultiParamArray (Int)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAByZipPage -- 'schedulesScheduleAByZipGet' route
    :<|> "schedules" :> "schedule_a" :> "efile" :> QueryParam "max_date" Date :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "contributor_occupation" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_image_number" Text :> QueryParam "contributor_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_amount" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "contributor_employer" (QueryList 'MultiParamArray (Text)) :> QueryParam "page" Int :> QueryParam "min_amount" Text :> QueryParam "line_number" Text :> QueryParam "contributor_city" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "contributor_state" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_image_number" Text :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAEfilePage -- 'schedulesScheduleAEfileGet' route
    :<|> "schedules" :> "schedule_a" :> QueryParam "last_index" Int :> QueryParam "max_date" Date :> QueryParam "last_contribution_receipt_date" Date :> QueryParam "last_contribution_receipt_amount" Float :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "is_individual" Bool :> QueryParam "last_contributor_aggregate_ytd" Float :> QueryParam "contributor_state" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "contributor_occupation" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_image_number" Text :> QueryParam "contributor_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_amount" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "contributor_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "contributor_employer" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_amount" Text :> QueryParam "two_year_transaction_period" Int :> QueryParam "line_number" Text :> QueryParam "contributor_city" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "contributor_zip" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_image_number" Text :> QueryParam "contributor_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAPage -- 'schedulesScheduleAGet' route
    :<|> "schedules" :> "schedule_a" :> Capture "sub_id" Text :> QueryParam "last_index" Int :> QueryParam "max_date" Date :> QueryParam "last_contribution_receipt_date" Date :> QueryParam "last_contribution_receipt_amount" Float :> QueryParam "image_number" (QueryList 'MultiParamArray (Text)) :> QueryParam "is_individual" Bool :> QueryParam "last_contributor_aggregate_ytd" Float :> QueryParam "contributor_state" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> QueryParam "sort_null_only" Bool :> QueryParam "min_date" Date :> QueryParam "contributor_occupation" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_image_number" Text :> QueryParam "contributor_name" (QueryList 'MultiParamArray (Text)) :> QueryParam "max_amount" Text :> QueryParam "committee_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort" Text :> QueryParam "contributor_id" (QueryList 'MultiParamArray (Text)) :> QueryParam "contributor_employer" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_amount" Text :> QueryParam "two_year_transaction_period" Int :> QueryParam "line_number" Text :> QueryParam "contributor_city" (QueryList 'MultiParamArray (Text)) :> QueryParam "sort_hide_null" Bool :> QueryParam "contributor_zip" (QueryList 'MultiParamArray (Text)) :> QueryParam "min_image_number" Text :> QueryParam "contributor_type" (QueryList 'MultiParamArray (Text)) :> QueryParam "per_page" Int :> Verb 'GET 200 '[JSON] ScheduleAPage -- 'schedulesScheduleASubIdGet' route
    :<|> "names" :> "candidates" :> QueryParam "q" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> Verb 'GET 200 '[JSON] CandidateSearchList -- 'namesCandidatesGet' route
    :<|> "names" :> "committees" :> QueryParam "q" (QueryList 'MultiParamArray (Text)) :> QueryParam "api_key" Text :> Verb 'GET 200 '[JSON] CommitteeSearchList -- 'namesCommitteesGet' route

-- | Server or client configuration, specifying the host and port to query or serve on.
data ServerConfig = ServerConfig
  { configHost :: String  -- ^ Hostname to serve on, e.g. "127.0.0.1"
  , configPort :: Int      -- ^ Port to serve on, e.g. 8080
  } deriving (Eq, Ord, Show, Read)

-- | List of elements parsed from a query.
newtype QueryList (p :: CollectionFormat) a = QueryList
  { fromQueryList :: [a]
  } deriving (Functor, Applicative, Monad, Foldable, Traversable)

-- | Formats in which a list can be encoded into a HTTP path.
data CollectionFormat
  = CommaSeparated -- ^ CSV format for multiple parameters.
  | SpaceSeparated -- ^ Also called "SSV"
  | TabSeparated -- ^ Also called "TSV"
  | PipeSeparated -- ^ `value1|value2|value2`
  | MultiParamArray -- ^ Using multiple GET parameters, e.g. `foo=bar&foo=baz`. Only for GET params.

instance FromHttpApiData a => FromHttpApiData (QueryList 'CommaSeparated a) where
  parseQueryParam = parseSeparatedQueryList ','

instance FromHttpApiData a => FromHttpApiData (QueryList 'TabSeparated a) where
  parseQueryParam = parseSeparatedQueryList '\t'

instance FromHttpApiData a => FromHttpApiData (QueryList 'SpaceSeparated a) where
  parseQueryParam = parseSeparatedQueryList ' '

instance FromHttpApiData a => FromHttpApiData (QueryList 'PipeSeparated a) where
  parseQueryParam = parseSeparatedQueryList '|'

instance FromHttpApiData a => FromHttpApiData (QueryList 'MultiParamArray a) where
  parseQueryParam = error "unimplemented FromHttpApiData for MultiParamArray collection format"

parseSeparatedQueryList :: FromHttpApiData a => Char -> Text -> Either Text (QueryList p a)
parseSeparatedQueryList char = fmap QueryList . mapM parseQueryParam . T.split (== char)

instance ToHttpApiData a => ToHttpApiData (QueryList 'CommaSeparated a) where
  toQueryParam = formatSeparatedQueryList ','

instance ToHttpApiData a => ToHttpApiData (QueryList 'TabSeparated a) where
  toQueryParam = formatSeparatedQueryList '\t'

instance ToHttpApiData a => ToHttpApiData (QueryList 'SpaceSeparated a) where
  toQueryParam = formatSeparatedQueryList ' '

instance ToHttpApiData a => ToHttpApiData (QueryList 'PipeSeparated a) where
  toQueryParam = formatSeparatedQueryList '|'

instance ToHttpApiData a => ToHttpApiData (QueryList 'MultiParamArray a) where
  toQueryParam = error "unimplemented ToHttpApiData for MultiParamArray collection format"

formatSeparatedQueryList :: ToHttpApiData a => Char ->  QueryList p a -> Text
formatSeparatedQueryList char = T.intercalate (T.singleton char) . map toQueryParam . fromQueryList


-- | Backend for OpenFEC.
-- The backend can be used both for the client and the server. The client generated from the OpenFEC Swagger spec
-- is a backend that executes actions by sending HTTP requests (see @createOpenFECClient@). Alternatively, provided
-- a backend, the API can be served using @runOpenFECServer@.
data OpenFECBackend m = OpenFECBackend
  { auditCaseGet :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe Text -> Maybe Int -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe [Int] -> Maybe Int -> Maybe Int -> Maybe Bool -> Maybe Int -> Maybe [Text] -> m AuditCasePage{- ^  This endpoint contains Final Audit Reports approved by the Commission since inception. The search can be based on information about the audited committee (Name, FEC ID Number, Type,  Election Cycle) or the issues covered in the report.  -}
  , auditCategoryGet :: Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe Int -> m AuditCategoryPage{- ^  This lists the options for the categories and subcategories available in the /audit-search/ endpoint.  -}
  , auditPrimaryCategoryGet :: Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe Int -> m AuditPrimaryCategoryPage{- ^  This lists the options for the primary categories available in the /audit-search/ endpoint.  -}
  , namesAuditCandidatesGet :: Maybe [Text] -> Maybe Text -> m AuditCandidateSearchList{- ^  Search for candidates or committees by name. If you're looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step.  -}
  , namesAuditCommitteesGet :: Maybe [Text] -> Maybe Text -> m AuditCommitteeSearchList{- ^  Search for candidates or committees by name. If you're looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step.  -}
  , candidateCandidateIdGet :: Text -> Maybe Int -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe [Int] -> Maybe [Text] -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> m CandidateDetailPage{- ^  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.   -}
  , candidateCandidateIdHistoryCycleGet :: Text -> Int -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> m CandidateHistoryPage{- ^  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office.  -}
  , candidateCandidateIdHistoryGet :: Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> m CandidateHistoryPage{- ^  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office.  -}
  , candidateCandidateIdTotalsGet :: Text -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Text -> Maybe Int -> Maybe Text -> m CommitteeTotalsPage{- ^  This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year — for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  -}
  , candidatesGet :: Maybe Int -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe [Text] -> Maybe [Text] -> Maybe Date -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe [Int] -> Maybe [Text] -> Maybe [Text] -> Maybe Date -> Maybe Bool -> Maybe Bool -> m CandidatePage{- ^  Fetch basic information about candidates, and use parameters to filter results to the candidates you're looking for.  Each result reflects a unique FEC candidate ID. That ID is particular to the candidate for a particular office sought. If a candidate runs for the same office multiple times, the ID stays the same. If the same person runs for another office — for example, a House candidate runs for a Senate office — that candidate will get a unique ID for each office.  -}
  , candidatesSearchGet :: Maybe Int -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe [Text] -> Maybe [Text] -> Maybe Date -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe [Int] -> Maybe [Text] -> Maybe [Text] -> Maybe Date -> Maybe Bool -> Maybe Bool -> m CandidatePage{- ^  Fetch basic information about candidates and their principal committees.  Each result reflects a unique FEC candidate ID. That ID is assigned to the candidate for a particular office sought. If a candidate runs for the same office over time, that ID stays the same. If the same person runs for multiple offices — for example, a House candidate runs for a Senate office — that candidate will get a unique ID for each office.  The candidate endpoints primarily use data from FEC registration [Form 1](http://www.fec.gov/pdf/forms/fecfrm1.pdf), for candidate information, and [Form 2](http://www.fec.gov/pdf/forms/fecfrm2.pdf), for committees information, with additional information to provide context.  -}
  , candidatesTotalsGet :: Maybe Int -> Maybe [Text] -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe [Int] -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe Text -> Maybe [Text] -> m CandidateHistoryTotalPage{- ^ Aggregated candidate receipts and disbursements grouped by cycle. -}
  , committeeCommitteeIdCandidatesGet :: Text -> Maybe Int -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe [Int] -> Maybe [Text] -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> m CandidateDetailPage{- ^  This endpoint is useful for finding detailed information about a particular candidate. Use the `candidate_id` to find the most recent information about that candidate.   -}
  , committeeCommitteeIdCandidatesHistoryCycleGet :: Text -> Int -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> m CandidateHistoryPage{- ^  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office.  -}
  , committeeCommitteeIdCandidatesHistoryGet :: Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> m CandidateHistoryPage{- ^  Find out a candidate's characteristics over time. This is particularly useful if the candidate runs for the same office in different districts or you want to know more about a candidate's previous races.  This information is organized by `candidate_id`, so it won't help you find a candidate who ran for different offices over time; candidates get a new ID for each office.  -}
  , candidateCandidateIdCommitteesGet :: Text -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe [Int] -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe Int -> m CommitteeDetailPage{- ^  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee.  -}
  , candidateCandidateIdCommitteesHistoryCycleGet :: Text -> Int -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> m CommitteeHistoryPage{- ^  Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.  -}
  , candidateCandidateIdCommitteesHistoryGet :: Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> m CommitteeHistoryPage{- ^  Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.  -}
  , committeeCommitteeIdGet :: Text -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe [Int] -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe Int -> m CommitteeDetailPage{- ^  This endpoint is useful for finding detailed information about a particular committee or filer. Use the `committee_id` to find the most recent information about the committee.  -}
  , committeeCommitteeIdHistoryCycleGet :: Text -> Int -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> m CommitteeHistoryPage{- ^  Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.  -}
  , committeeCommitteeIdHistoryGet :: Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Bool -> Maybe Int -> m CommitteeHistoryPage{- ^  Explore a filer's characteristics over time. This can be particularly useful if the committees change treasurers, designation, or `committee_type`.  -}
  , committeesGet :: Maybe [Text] -> Maybe Int -> Maybe Date -> Maybe Text -> Maybe Bool -> Maybe Date -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Date -> Maybe [Int] -> Maybe [Text] -> Maybe Int -> Maybe [Text] -> Maybe Date -> Maybe [Text] -> Maybe [Text] -> Maybe Bool -> m CommitteePage{- ^  Fetch basic information about committees and filers. Use parameters to filter for particular characteristics.   -}
  , committeeCommitteeIdCommunicationCostsByCandidateGet :: Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m CommunicationCostByCandidatePage{- ^ Communication cost aggregated by candidate ID and committee ID. -}
  , communicationCostsByCandidateGet :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m CommunicationCostByCandidatePage{- ^ Communication cost aggregated by candidate ID and committee ID. -}
  , communicationCostsGet :: Maybe Date -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe Date -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> m CommunicationCostPage{- ^  52 U.S.C. 30118 allows \"communications by a corporation to its stockholders and executive or administrative personnel and their families or by a labor organization to its members and their families on any subject,\" including the express advocacy of the election or defeat of any Federal candidate.  The costs of such communications must be reported to the Federal Election Commission under certain circumstances.  -}
  , calendarDatesExportGet :: Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Integer -> Maybe Integer -> Maybe Integer -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Integer -> Maybe Bool -> Maybe [Text] -> Maybe Int -> Maybe Int -> m CalendarDatePage{- ^  Returns CSV or ICS for downloading directly into calendar applications like Google, Outlook or other applications.  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State filtering now applies to elections, reports and reporting periods.  Presidential pre-primary report due dates are not shown on even years. Filers generally opt to file monthly rather than submit over 50 pre-primary election reports. All reporting deadlines are available at /reporting-dates/ for reference.  This is [the sql function](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V40__omnibus_dates.sql) that creates the calendar.   -}
  , calendarDatesGet :: Maybe Text -> Maybe Integer -> Maybe Integer -> Maybe [Text] -> Maybe Int -> Maybe Int -> Maybe [Int] -> Maybe Integer -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe Int -> Maybe Integer -> m CalendarDatePage{- ^  Combines the election and reporting dates with Commission meetings, conferences, outreach, Advisory Opinions, rules, litigation dates and other events into one calendar.  State and report type filtering is no longer available.  -}
  , electionDatesGet :: Maybe Text -> Maybe Date -> Maybe Bool -> Maybe [Text] -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Date -> Maybe Date -> Maybe [Text] -> Maybe Int -> Maybe Date -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Date -> Maybe Int -> m Inline_response_default{- ^ FEC election dates since 1995. -}
  , reportingDatesGet :: Maybe Text -> Maybe Date -> Maybe Date -> Maybe Int -> Maybe [Int] -> Maybe Date -> Maybe [Text] -> Maybe Bool -> Maybe Text -> Maybe Date -> Maybe Bool -> Maybe Date -> Maybe Date -> Maybe Int -> m Inline_response_default_2{- ^ FEC reporting dates since 1995. -}
  , schedulesScheduleDGet :: Maybe Text -> Maybe Float -> Maybe Date -> Maybe Float -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Date -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Float -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Float -> Maybe Bool -> Maybe Text -> Maybe Int -> m Inline_response_default_4{- ^  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.    -}
  , schedulesScheduleDSubIdGet :: Text -> Maybe Int -> Maybe Text -> Maybe Int -> m Inline_response_default_4{- ^  Schedule D, it shows debts and obligations owed to or by the committee that are required to be disclosed.    -}
  , committeeCommitteeIdSchedulesScheduleBByPurposeGet :: Text -> Maybe Bool -> Maybe Text -> Maybe [Int] -> Maybe Bool -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleBByPurposePage{- ^  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details.  -}
  , committeeCommitteeIdSchedulesScheduleBByRecipientGet :: Text -> Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleBByRecipientPage{- ^ Schedule B receipts aggregated by recipient name. To avoid double counting, memoed items are not included. -}
  , committeeCommitteeIdSchedulesScheduleBByRecipientIdGet :: Text -> Maybe Bool -> Maybe Text -> Maybe [Int] -> Maybe Bool -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleBByRecipientIDPage{- ^ Schedule B receipts aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. -}
  , schedulesScheduleBByPurposeGet :: Maybe Bool -> Maybe Text -> Maybe [Int] -> Maybe Bool -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleBByPurposePage{- ^  Schedule B disbursements aggregated by disbursement purpose category. To avoid double counting, memoed items are not included. Purpose is a combination of transaction codes, category codes and disbursement description. See the `disbursement_purpose` sql function within the migrations for more details.  -}
  , schedulesScheduleBByRecipientGet :: Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleBByRecipientPage{- ^ Schedule B receipts aggregated by recipient name. To avoid double counting, memoed items are not included. -}
  , schedulesScheduleBByRecipientIdGet :: Maybe Bool -> Maybe Text -> Maybe [Int] -> Maybe Bool -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleBByRecipientIDPage{- ^ Schedule B receipts aggregated by recipient committee ID, if applicable. To avoid double counting, memoed items are not included. -}
  , schedulesScheduleBEfileGet :: Maybe [Text] -> Maybe Text -> Maybe Date -> Maybe [Text] -> Maybe Int -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Date -> Maybe Bool -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Text -> Maybe Int -> m ScheduleBEfilePage{- ^  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don't contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.  -}
  , schedulesScheduleBGet :: Maybe [Text] -> Maybe Int -> Maybe Date -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Date -> Maybe Float -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Int -> Maybe [Text] -> Maybe Date -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Text -> Maybe Int -> m ScheduleBPage{- ^  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.  -}
  , schedulesScheduleBSubIdGet :: Text -> Maybe [Text] -> Maybe Int -> Maybe Date -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Date -> Maybe Float -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Int -> Maybe [Text] -> Maybe Date -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Text -> Maybe Int -> m ScheduleBPage{- ^  Schedule B filings describe itemized disbursements. This data explains how committees and other filers spend their money. These figures are reported as part of forms F3, F3X and F3P.  The data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule B filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `disbursement_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 965191,     per_page: 20,     count: 19303814,     last_indexes: {         last_index: \"230906248\",         last_disbursement_date: \"2014-07-04\"     } } ```  To fetch the next page of sorted results, append `last_index=230906248` and `last_disbursement_date=2014-07-04` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule B data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.  -}
  , efileFilingsGet :: Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe Integer -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Integer -> Maybe Bool -> Maybe Int -> m EFilingsPage{- ^ Basic information about electronic files coming into the FEC, posted as they are received. -}
  , efileReportsHouseSenateGet :: Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe Integer -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Integer -> Maybe Bool -> Maybe Int -> m BaseF3FilingPage{- ^  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.  -}
  , efileReportsPacPartyGet :: Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe Integer -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Integer -> Maybe Bool -> Maybe Int -> m BaseF3XFilingPage{- ^  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.  -}
  , efileReportsPresidentialGet :: Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe Integer -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Integer -> Maybe Bool -> Maybe Int -> m BaseF3PFilingPage{- ^  Key financial data reported periodically by committees as they are reported. This feed includes summary information from the the House F3 reports, the presidential F3p reports and the PAC and party F3x reports.  Generally, committees file reports on a quarterly or monthly basis, but some must also submit a report 12 days before primary elections. Therefore, during the primary season, the period covered by this file may be different for different committees. These totals also incorporate any changes made by committees, if any report covering the period is amended.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.  -}
  , committeeCommitteeIdElectioneeringByCandidateGet :: Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m ElectioneeringByCandidatePage{- ^ Electioneering costs aggregated by candidate. -}
  , electioneeringByCandidateGet :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m ElectioneeringByCandidatePage{- ^ Electioneering costs aggregated by candidate. -}
  , electioneeringGet :: Maybe [Text] -> Maybe Text -> Maybe Int -> Maybe Date -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Date -> Maybe Bool -> Maybe [Text] -> Maybe Bool -> Maybe Text -> Maybe [Int] -> Maybe Int -> m ElectioneeringPage{- ^  An electioneering communication is any broadcast, cable or satellite communication that fulfills each of the following conditions:  _The communication refers to a clearly identified federal candidate._  _The communication is publicly distributed by a television station, radio station, cable television system or satellite system for a fee._  _The communication is distributed within 60 days prior to a general election or 30 days prior to a primary election to federal office._  -}
  , radAnalystGet :: Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe [Int] -> Maybe Int -> Maybe [Int] -> Maybe Date -> Maybe [Int] -> Maybe Bool -> Maybe [Text] -> Maybe Text -> Maybe Date -> Maybe [Text] -> Maybe Bool -> Maybe Int -> m RadAnalystPage{- ^  Use this endpoint to look up the RAD Analyst for a committee.  The mission of the Reports Analysis Division (RAD) is to ensure that campaigns and political committees file timely and accurate reports that fully disclose their financial activities.  RAD is responsible for reviewing statements and financial reports filed by political committees participating in federal elections, providing assistance and guidance to the committees to properly file their reports, and for taking appropriate action to ensure compliance with the Federal Election Campaign Act (FECA).  -}
  , stateElectionOfficeGet :: Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Int -> Maybe Text -> m StateElectionOfficeInfoPage{- ^  State laws and procedures govern elections for state or local offices as well as how candidates appear on election ballots. Contact the appropriate state election office for more information.  -}
  , candidateCandidateIdFilingsGet :: Text -> Maybe [Text] -> Maybe Bool -> Maybe Date -> Maybe Int -> Maybe [Text] -> Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Date -> Maybe [Int] -> Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe [Int] -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe [Text] -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> m FilingsPage{- ^  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.  -}
  , committeeCommitteeIdFilingsGet :: Text -> Maybe [Text] -> Maybe Bool -> Maybe Date -> Maybe Int -> Maybe [Text] -> Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Date -> Maybe [Int] -> Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe [Int] -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe [Text] -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> m FilingsPage{- ^  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.  -}
  , filingsGet :: Maybe [Text] -> Maybe Bool -> Maybe Date -> Maybe Int -> Maybe [Text] -> Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe Date -> Maybe [Int] -> Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe [Text] -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> m FilingsPage{- ^  All official records and reports filed by or delivered to the FEC.  Note: because the filings data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.  -}
  , operationsLogGet :: Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe [Text] -> Maybe Int -> Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe [Text] -> Maybe [Text] -> Maybe Int -> m OperationsLogPage{- ^  The Operations log contains details of each report loaded into the database. It is primarily used as status check to determine when all of the data processes, from initial entry through review are complete.  -}
  , committeeCommitteeIdReportsGet :: Text -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe [Text] -> m CommitteeReportsPage{- ^  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee's financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.  -}
  , committeeCommitteeIdTotalsGet :: Text -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Text -> Maybe Int -> Maybe Text -> m CommitteeTotalsPage{- ^  This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year — for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  -}
  , electionsGet :: Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Int -> m ElectionPage{- ^  Look at the top-level financial information for all candidates running for the same office.  Choose a 2-year cycle, and `house`, `senate` or `presidential`.  If you are looking for a Senate seat, you will need to select the state using a two-letter abbreviation.  House races require state and a two-digit district number.  Since this endpoint reflects financial information, it will only have candidates once they file financial reporting forms. Query the `/candidates` endpoint to see an up to date list of all the candidates that filed to run for a particular seat.  -}
  , electionsSearchGet :: Maybe [Text] -> Maybe Int -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe [Int] -> m ElectionsListPage{- ^  List elections by cycle, office, state, and district.  -}
  , electionsSummaryGet :: Maybe Text -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> m ElectionSummary{- ^  List elections by cycle, office, state, and district.  -}
  , reportsCommitteeTypeGet :: Text -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe [Text] -> Maybe Bool -> Maybe Text -> Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe [Int] -> Maybe Text -> Maybe Bool -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Integer -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Int -> m CommitteeReportsPage{- ^  Each report represents the summary information from FEC Form 3, Form 3X and Form 3P. These reports have key statistics that illuminate the financial status of a given committee. Things like cash on hand, debts owed by committee, total receipts, and total disbursements are especially helpful for understanding a committee's financial dealings.  By default, this endpoint includes both amended and final versions of each report. To restrict to only the final versions of each report, use `is_amended=false`; to view only reports that have been amended, use `is_amended=true`.  Several different reporting structures exist, depending on the type of organization that submits financial information. To see an example of these reporting requirements, look at the summary and detailed summary pages of FEC Form 3, Form 3X, and Form 3P.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.  -}
  , totalsByEntityGet :: Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Int -> Maybe Text -> Maybe Int -> m EntityReceiptDisbursementTotalsPage{- ^  Provides cumulative receipt totals by entity type, over a two year cycle. Totals are adjusted to avoid double counting.  This is [the sql](https://github.com/fecgov/openFEC/blob/develop/data/migrations/V41__large_aggregates.sql) that creates these calculations.  -}
  , totalsCommitteeTypeGet :: Text -> Maybe Text -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe [Int] -> Maybe Int -> m CommitteeTotalsPage{- ^  This endpoint provides information about a committee's Form 3, Form 3X, or Form 3P financial reports, which are aggregated by two-year period. We refer to two-year periods as a `cycle`.  The cycle is named after the even-numbered year and includes the year before it. To see totals from 2013 and 2014, you would use 2014. In odd-numbered years, the current cycle is the next year — for example, in 2015, the current cycle is 2016.  For presidential and Senate candidates, multiple two-year cycles exist between elections.  -}
  , committeeCommitteeIdSchedulesScheduleEByCandidateGet :: Text -> Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m ScheduleEByCandidatePage{- ^ Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included. -}
  , schedulesScheduleEByCandidateGet :: Maybe Text -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Int -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m ScheduleEByCandidatePage{- ^ Schedule E receipts aggregated by recipient candidate. To avoid double counting, memoed items are not included. -}
  , schedulesScheduleEEfileGet :: Maybe [Text] -> Maybe Text -> Maybe Date -> Maybe Date -> Maybe Date -> Maybe [Text] -> Maybe Int -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe Date -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Int -> m ScheduleEEfilePage{- ^  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don't contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.  -}
  , schedulesScheduleEGet :: Maybe Int -> Maybe Date -> Maybe [Text] -> Maybe [Text] -> Maybe Int -> Maybe [Bool] -> Maybe [Text] -> Maybe Bool -> Maybe Date -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe [Int] -> Maybe Float -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Float -> Maybe Date -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe [Text] -> m ScheduleEPage{- ^  Schedule E covers the line item expenditures for independent expenditures. For example, if a super PAC bought ads on TV to oppose a federal candidate, each ad purchase would be recorded here with the expenditure amount, name and id of the candidate, and whether the ad supported or opposed the candidate.  An independent expenditure is an expenditure for a communication \"expressly advocating the election or defeat of a clearly identified candidate that is not made in cooperation, consultation, or concert with, or at the request or suggestion of, a candidate, a candidate’s authorized committee, or their agents, or a political party or its agents.\"  Aggregates by candidate do not include 24 and 48 hour reports. This ensures we don't double count expenditures and the totals are more accurate. You can still find the information from 24 and 48 hour reports in `/schedule/schedule_e/`.  Due to the large quantity of Schedule E filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `expenditure_amount`, you might receive a page of results with the following pagination information:  ```  \"pagination\": {     \"count\": 152623,     \"last_indexes\": {       \"last_index\": \"3023037\",       \"last_expenditure_amount\": -17348.5     },     \"per_page\": 20,     \"pages\": 7632   } } ```  To fetch the next page of sorted results, append `last_index=3023037` and `last_expenditure_amount=` to the URL.  We strongly advise paging through these results by using the sort indices (defaults to sort by disbursement date, e.g. `last_disbursement_date`), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule E data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.  -}
  , legalSearchGet :: Maybe [Text] -> Maybe Date -> Maybe Text -> Maybe Date -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Date -> Maybe Bool -> Maybe [Text] -> Maybe Text -> Maybe Date -> Maybe Int -> Maybe Int -> Maybe Date -> Maybe Date -> Maybe Text -> Maybe Date -> Maybe Date -> Maybe [Text] -> Maybe Date -> Maybe Date -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Date -> Maybe Int -> Maybe [Text] -> Maybe [Text] -> Maybe Bool -> Maybe Text -> Maybe Date -> Maybe Int -> Maybe Text -> Maybe [Text] -> Maybe Date -> Maybe [Text] -> Maybe [Text] -> Maybe Date -> Maybe [Text] -> Maybe [Int] -> Maybe Int -> Maybe Date -> Maybe Date -> Maybe [Text] -> Maybe [Text] -> m Inline_response_default_1{- ^  Search legal documents by type, or across all document types using keywords, parameter values and ranges.  -}
  , schedulesScheduleCGet :: Maybe Date -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Date -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe Int -> Maybe Int -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> Maybe Int -> m Inline_response_default_3{- ^  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid.  -}
  , schedulesScheduleCSubIdGet :: Text -> Maybe Int -> Maybe Text -> Maybe Int -> m Inline_response_default_3{- ^  Schedule C shows all loans, endorsements and loan guarantees a committee receives or makes.  The committee continues to report the loan until it is repaid.  -}
  , schedulesScheduleFGet :: Maybe Date -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Date -> Maybe Text -> Maybe [Text] -> Maybe [Int] -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe Bool -> Maybe Text -> Maybe Int -> m Inline_response_default_5{- ^  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees.  -}
  , schedulesScheduleFSubIdGet :: Text -> Maybe Int -> Maybe Text -> Maybe Int -> m Inline_response_default_5{- ^  Schedule F, it shows all special expenditures a national or state party committee makes in connection with the general election campaigns of federal candidates.  These coordinated party expenditures do not count against the contribution limits but are subject to other limits, these limits are detailed in Chapter 7 of the FEC Campaign Guide for Political Party Committees.  -}
  , committeeCommitteeIdSchedulesScheduleAByEmployerGet :: Text -> Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleAByEmployerPage{- ^ Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included. -}
  , committeeCommitteeIdSchedulesScheduleAByOccupationGet :: Text -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleAByOccupationPage{- ^ Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included. -}
  , committeeCommitteeIdSchedulesScheduleABySizeGet :: Text -> Maybe Bool -> Maybe Text -> Maybe [Int] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleABySizePage{- ^  This endpoint aggregates Schedule A donations based on size:   - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 +  In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less.  -}
  , committeeCommitteeIdSchedulesScheduleAByStateGet :: Text -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Bool -> Maybe Int -> m ScheduleAByStatePage{- ^  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals.  -}
  , committeeCommitteeIdSchedulesScheduleAByZipGet :: Text -> Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m ScheduleAByZipPage{- ^ Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included. -}
  , schedulesScheduleAByEmployerGet :: Maybe Bool -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleAByEmployerPage{- ^ Schedule A receipts aggregated by contributor employer name. To avoid double counting, memoed items are not included. -}
  , schedulesScheduleAByOccupationGet :: Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleAByOccupationPage{- ^ Schedule A receipts aggregated by contributor occupation. To avoid double counting, memoed items are not included. -}
  , schedulesScheduleABySizeByCandidateGet :: Maybe Text -> Maybe Int -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m ScheduleABySizeCandidatePage{- ^ Schedule A receipts aggregated by contribution size. -}
  , schedulesScheduleABySizeGet :: Maybe Bool -> Maybe Text -> Maybe [Int] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> Maybe Text -> Maybe Int -> m ScheduleABySizePage{- ^  This endpoint aggregates Schedule A donations based on size:   - $200 and under  - $200.01 - $499.99  - $500 - $999.99  - $1000 - $1999.99  - $2000 +  In cases where the donations are $200 or less, the results include small donations that are reported on Schedule A, but filers are not required to itemize those small donations, so we also add unitemized contributions. Unitemized contributions come from the summary section of the forms. It represents the total money brought in from donors that are not reported on Schedule A and have given $200 or less.  -}
  , schedulesScheduleAByStateByCandidateGet :: Maybe Text -> Maybe Int -> Maybe Bool -> Maybe Text -> Maybe Bool -> Maybe [Text] -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m ScheduleAByStateCandidatePage{- ^ Schedule A receipts aggregated by contributor state. -}
  , schedulesScheduleAByStateGet :: Maybe Text -> Maybe Int -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Bool -> Maybe Int -> m ScheduleAByStatePage{- ^  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals.  -}
  , schedulesScheduleAByStateTotalsGet :: Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m ScheduleAByStateRecipientTotalsPage{- ^  Schedule A individual receipts aggregated by contributor state. This is an aggregate of only individual contributions. To avoid double counting, memoed items are not included. Transactions $200 and under do not have to be itemized, if those contributions are not itemized, they will not be included in the state totals.  These receipts are then added together by committee type for the total amount of each type, grouped by state and cycle.  -}
  , schedulesScheduleAByZipGet :: Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe Bool -> Maybe [Int] -> Maybe Int -> m ScheduleAByZipPage{- ^ Schedule A receipts aggregated by contributor zip code. To avoid double counting, memoed items are not included. -}
  , schedulesScheduleAEfileGet :: Maybe Date -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Date -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Int -> Maybe Text -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Text -> Maybe Int -> m ScheduleAEfilePage{- ^  Efiling endpoints provide real-time campaign finance data for electronic filers.  These endpoints are perfect for watching filings roll in when you want to know the latest information. Efiling endpoints only contain the most recent two years worth of data and don't contain the processed and coded data that you can find on the other endpoints. Those endpoints are better for in-depth analysis.  Senate candidates and committees are required to file by paper. Other committees who raise and spend less than $50,000 in a calendar can choose whether to file electronically or by paper.  DISCLAIMER: The field labels contained within this resource are subject to change.  We are attempting to succinctly label these fields while conveying clear meaning to ensure accessibility for all users.  -}
  , schedulesScheduleAGet :: Maybe Int -> Maybe Date -> Maybe Date -> Maybe Float -> Maybe [Text] -> Maybe Bool -> Maybe Float -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Date -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Int -> m ScheduleAPage{- ^  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee's percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee's percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.  -}
  , schedulesScheduleASubIdGet :: Text -> Maybe Int -> Maybe Date -> Maybe Date -> Maybe Float -> Maybe [Text] -> Maybe Bool -> Maybe Float -> Maybe [Text] -> Maybe Text -> Maybe Bool -> Maybe Date -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe [Text] -> Maybe Text -> Maybe Int -> Maybe Text -> Maybe [Text] -> Maybe Bool -> Maybe [Text] -> Maybe Text -> Maybe [Text] -> Maybe Int -> m ScheduleAPage{- ^  Schedule A records describe itemized receipts reported by a committee. This is where you can look for individual contributors. If you are interested in individual donors, `/schedules/schedule_a` will be the endpoint you use.  Once a person gives more than a total of $200, the donations of that person must be reported by committees that file F3, F3X and F3P forms.  Contributions $200 and under are not required to be itemized, but you can find the total amount of these small donations by looking up the \"unitemized\" field in the `/reports` or `/totals` endpoints.  When comparing the totals from reports to line items. the totals will not match unless you only look at items where `\"is_individual\":true` since the same transaction is in the data multiple ways to explain the way it may move though different committees as an earmark. See the `is_individual` sql function within the migrations for more details.  For the Schedule A aggregates, such as by_occupation and by_state, include only unique individual contributions. See below for full methodology.  __Methodology for determining unique, individual contributions__  For receipts over $200 use FEC code line_number to identify individuals.  The line numbers that specify individuals that are automatically included:  Line number with description     - 10 Contribution to Independent Expenditure-Only Committees (Super PACs),          Political Committees with non-contribution accounts (Hybrid PACs)          and nonfederal party \"soft money\" accounts (1991-2002)          from a person (individual, partnership, limited liability company,          corporation, labor organization, or any other organization or          group of persons)     - 15 Contribution to political committees (other than Super PACs          and Hybrid PACs) from an individual, partnership or          limited liability company     - 15E Earmarked contributions to political committees           (other than Super PACs and Hybrid PACs) from an individual,           partnership or limited liability company     - 15J Memo - Recipient committee's percentage of contribution           from an individual, partnership or limited liability           company given to joint fundraising committee     - 18J | Memo - Recipient committee's percentage of contribution           from a registered committee given to joint fundraising committee     - 30, 30T, 31, 31T, 32 Individual party codes  For receipts under $200: We check the following codes and see if there is \"earmark\" (or a variation) in the `memo_text` description of the contribution.  Line number with description     -11AI The itemized individual contributions from F3 schedule A     -12 Nonfederal other receipt - Levin Account (Line 2)     -17 Itemized individual contributions from Form 3P     -17A Itemized individual contributions from Form 3P     -18 Itemized individual contributions from Form 3P  Of those transactions,[under $200, and having \"earmark\" in the memo text OR transactions having the codes 11A, 12, 17, 17A, or 18], we then want to exclude earmarks.   All receipt data is divided in two-year periods, called `two_year_transaction_period`, which is derived from the `report_year` submitted of the corresponding form. If no value is supplied, the results will default to the most recent two-year period that is named after the ending, even-numbered year.  Due to the large quantity of Schedule A filings, this endpoint is not paginated by page number. Instead, you can request the next page of results by adding the values in the `last_indexes` object from `pagination` to the URL of your last request. For example, when sorting by `contribution_receipt_date`, you might receive a page of results with the following pagination information:  ``` pagination: {     pages: 2152643,     per_page: 20,     count: 43052850,     last_indexes: {         last_index: \"230880619\",         last_contribution_receipt_date: \"2014-01-01\"     } } ```  To fetch the next page of sorted results, append `last_index=230880619` and `last_contribution_receipt_date=2014-01-01` to the URL.  We strongly advise paging through these results by using sort indices (defaults to sort by contribution date), otherwise some resources may be unintentionally filtered out.  This resource uses keyset pagination to improve query performance and these indices are required to properly page through this large dataset.  Note: because the Schedule A data includes many records, counts for large result sets are approximate; you will want to page through the records until no records are returned.  -}
  , namesCandidatesGet :: Maybe [Text] -> Maybe Text -> m CandidateSearchList{- ^  Search for candidates or committees by name. If you're looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step.  -}
  , namesCommitteesGet :: Maybe [Text] -> Maybe Text -> m CommitteeSearchList{- ^  Search for candidates or committees by name. If you're looking for information on a particular person or group, using a name to find the `candidate_id` or `committee_id` on this endpoint can be a helpful first step.  -}
  }

newtype OpenFECClient a = OpenFECClient
  { runClient :: Manager -> BaseUrl -> ExceptT ServantError IO a
  } deriving Functor

instance Applicative OpenFECClient where
  pure x = OpenFECClient (\_ _ -> pure x)
  (OpenFECClient f) <*> (OpenFECClient x) =
    OpenFECClient (\manager url -> f manager url <*> x manager url)

instance Monad OpenFECClient where
  (OpenFECClient a) >>= f =
    OpenFECClient (\manager url -> do
      value <- a manager url
      runClient (f value) manager url)

instance MonadIO OpenFECClient where
  liftIO io = OpenFECClient (\_ _ -> liftIO io)

createOpenFECClient :: OpenFECBackend OpenFECClient
createOpenFECClient = OpenFECBackend{..}
  where
    ((coerce -> auditCaseGet) :<|>
     (coerce -> auditCategoryGet) :<|>
     (coerce -> auditPrimaryCategoryGet) :<|>
     (coerce -> namesAuditCandidatesGet) :<|>
     (coerce -> namesAuditCommitteesGet) :<|>
     (coerce -> candidateCandidateIdGet) :<|>
     (coerce -> candidateCandidateIdHistoryCycleGet) :<|>
     (coerce -> candidateCandidateIdHistoryGet) :<|>
     (coerce -> candidateCandidateIdTotalsGet) :<|>
     (coerce -> candidatesGet) :<|>
     (coerce -> candidatesSearchGet) :<|>
     (coerce -> candidatesTotalsGet) :<|>
     (coerce -> committeeCommitteeIdCandidatesGet) :<|>
     (coerce -> committeeCommitteeIdCandidatesHistoryCycleGet) :<|>
     (coerce -> committeeCommitteeIdCandidatesHistoryGet) :<|>
     (coerce -> candidateCandidateIdCommitteesGet) :<|>
     (coerce -> candidateCandidateIdCommitteesHistoryCycleGet) :<|>
     (coerce -> candidateCandidateIdCommitteesHistoryGet) :<|>
     (coerce -> committeeCommitteeIdGet) :<|>
     (coerce -> committeeCommitteeIdHistoryCycleGet) :<|>
     (coerce -> committeeCommitteeIdHistoryGet) :<|>
     (coerce -> committeesGet) :<|>
     (coerce -> committeeCommitteeIdCommunicationCostsByCandidateGet) :<|>
     (coerce -> communicationCostsByCandidateGet) :<|>
     (coerce -> communicationCostsGet) :<|>
     (coerce -> calendarDatesExportGet) :<|>
     (coerce -> calendarDatesGet) :<|>
     (coerce -> electionDatesGet) :<|>
     (coerce -> reportingDatesGet) :<|>
     (coerce -> schedulesScheduleDGet) :<|>
     (coerce -> schedulesScheduleDSubIdGet) :<|>
     (coerce -> committeeCommitteeIdSchedulesScheduleBByPurposeGet) :<|>
     (coerce -> committeeCommitteeIdSchedulesScheduleBByRecipientGet) :<|>
     (coerce -> committeeCommitteeIdSchedulesScheduleBByRecipientIdGet) :<|>
     (coerce -> schedulesScheduleBByPurposeGet) :<|>
     (coerce -> schedulesScheduleBByRecipientGet) :<|>
     (coerce -> schedulesScheduleBByRecipientIdGet) :<|>
     (coerce -> schedulesScheduleBEfileGet) :<|>
     (coerce -> schedulesScheduleBGet) :<|>
     (coerce -> schedulesScheduleBSubIdGet) :<|>
     (coerce -> efileFilingsGet) :<|>
     (coerce -> efileReportsHouseSenateGet) :<|>
     (coerce -> efileReportsPacPartyGet) :<|>
     (coerce -> efileReportsPresidentialGet) :<|>
     (coerce -> committeeCommitteeIdElectioneeringByCandidateGet) :<|>
     (coerce -> electioneeringByCandidateGet) :<|>
     (coerce -> electioneeringGet) :<|>
     (coerce -> radAnalystGet) :<|>
     (coerce -> stateElectionOfficeGet) :<|>
     (coerce -> candidateCandidateIdFilingsGet) :<|>
     (coerce -> committeeCommitteeIdFilingsGet) :<|>
     (coerce -> filingsGet) :<|>
     (coerce -> operationsLogGet) :<|>
     (coerce -> committeeCommitteeIdReportsGet) :<|>
     (coerce -> committeeCommitteeIdTotalsGet) :<|>
     (coerce -> electionsGet) :<|>
     (coerce -> electionsSearchGet) :<|>
     (coerce -> electionsSummaryGet) :<|>
     (coerce -> reportsCommitteeTypeGet) :<|>
     (coerce -> totalsByEntityGet) :<|>
     (coerce -> totalsCommitteeTypeGet) :<|>
     (coerce -> committeeCommitteeIdSchedulesScheduleEByCandidateGet) :<|>
     (coerce -> schedulesScheduleEByCandidateGet) :<|>
     (coerce -> schedulesScheduleEEfileGet) :<|>
     (coerce -> schedulesScheduleEGet) :<|>
     (coerce -> legalSearchGet) :<|>
     (coerce -> schedulesScheduleCGet) :<|>
     (coerce -> schedulesScheduleCSubIdGet) :<|>
     (coerce -> schedulesScheduleFGet) :<|>
     (coerce -> schedulesScheduleFSubIdGet) :<|>
     (coerce -> committeeCommitteeIdSchedulesScheduleAByEmployerGet) :<|>
     (coerce -> committeeCommitteeIdSchedulesScheduleAByOccupationGet) :<|>
     (coerce -> committeeCommitteeIdSchedulesScheduleABySizeGet) :<|>
     (coerce -> committeeCommitteeIdSchedulesScheduleAByStateGet) :<|>
     (coerce -> committeeCommitteeIdSchedulesScheduleAByZipGet) :<|>
     (coerce -> schedulesScheduleAByEmployerGet) :<|>
     (coerce -> schedulesScheduleAByOccupationGet) :<|>
     (coerce -> schedulesScheduleABySizeByCandidateGet) :<|>
     (coerce -> schedulesScheduleABySizeGet) :<|>
     (coerce -> schedulesScheduleAByStateByCandidateGet) :<|>
     (coerce -> schedulesScheduleAByStateGet) :<|>
     (coerce -> schedulesScheduleAByStateTotalsGet) :<|>
     (coerce -> schedulesScheduleAByZipGet) :<|>
     (coerce -> schedulesScheduleAEfileGet) :<|>
     (coerce -> schedulesScheduleAGet) :<|>
     (coerce -> schedulesScheduleASubIdGet) :<|>
     (coerce -> namesCandidatesGet) :<|>
     (coerce -> namesCommitteesGet)) = client (Proxy :: Proxy OpenFECAPI)

-- | Run requests in the OpenFECClient monad.
runOpenFECClient :: ServerConfig -> OpenFECClient a -> ExceptT ServantError IO a
runOpenFECClient clientConfig cl = do
  manager <- liftIO $ newManager defaultManagerSettings
  runOpenFECClientWithManager manager clientConfig cl

-- | Run requests in the OpenFECClient monad using a custom manager.
runOpenFECClientWithManager :: Manager -> ServerConfig -> OpenFECClient a -> ExceptT ServantError IO a
runOpenFECClientWithManager manager clientConfig cl =
  runClient cl manager $ BaseUrl Http (configHost clientConfig) (configPort clientConfig) ""

-- | Run the OpenFEC server at the provided host and port.
runOpenFECServer :: MonadIO m => ServerConfig -> OpenFECBackend (ExceptT ServantErr IO)  -> m ()
runOpenFECServer ServerConfig{..} backend =
  liftIO $ Warp.runSettings warpSettings $ serve (Proxy :: Proxy OpenFECAPI) (serverFromBackend backend)
  where
    warpSettings = Warp.defaultSettings & Warp.setPort configPort & Warp.setHost (fromString configHost)
    serverFromBackend OpenFECBackend{..} =
      (coerce auditCaseGet :<|>
       coerce auditCategoryGet :<|>
       coerce auditPrimaryCategoryGet :<|>
       coerce namesAuditCandidatesGet :<|>
       coerce namesAuditCommitteesGet :<|>
       coerce candidateCandidateIdGet :<|>
       coerce candidateCandidateIdHistoryCycleGet :<|>
       coerce candidateCandidateIdHistoryGet :<|>
       coerce candidateCandidateIdTotalsGet :<|>
       coerce candidatesGet :<|>
       coerce candidatesSearchGet :<|>
       coerce candidatesTotalsGet :<|>
       coerce committeeCommitteeIdCandidatesGet :<|>
       coerce committeeCommitteeIdCandidatesHistoryCycleGet :<|>
       coerce committeeCommitteeIdCandidatesHistoryGet :<|>
       coerce candidateCandidateIdCommitteesGet :<|>
       coerce candidateCandidateIdCommitteesHistoryCycleGet :<|>
       coerce candidateCandidateIdCommitteesHistoryGet :<|>
       coerce committeeCommitteeIdGet :<|>
       coerce committeeCommitteeIdHistoryCycleGet :<|>
       coerce committeeCommitteeIdHistoryGet :<|>
       coerce committeesGet :<|>
       coerce committeeCommitteeIdCommunicationCostsByCandidateGet :<|>
       coerce communicationCostsByCandidateGet :<|>
       coerce communicationCostsGet :<|>
       coerce calendarDatesExportGet :<|>
       coerce calendarDatesGet :<|>
       coerce electionDatesGet :<|>
       coerce reportingDatesGet :<|>
       coerce schedulesScheduleDGet :<|>
       coerce schedulesScheduleDSubIdGet :<|>
       coerce committeeCommitteeIdSchedulesScheduleBByPurposeGet :<|>
       coerce committeeCommitteeIdSchedulesScheduleBByRecipientGet :<|>
       coerce committeeCommitteeIdSchedulesScheduleBByRecipientIdGet :<|>
       coerce schedulesScheduleBByPurposeGet :<|>
       coerce schedulesScheduleBByRecipientGet :<|>
       coerce schedulesScheduleBByRecipientIdGet :<|>
       coerce schedulesScheduleBEfileGet :<|>
       coerce schedulesScheduleBGet :<|>
       coerce schedulesScheduleBSubIdGet :<|>
       coerce efileFilingsGet :<|>
       coerce efileReportsHouseSenateGet :<|>
       coerce efileReportsPacPartyGet :<|>
       coerce efileReportsPresidentialGet :<|>
       coerce committeeCommitteeIdElectioneeringByCandidateGet :<|>
       coerce electioneeringByCandidateGet :<|>
       coerce electioneeringGet :<|>
       coerce radAnalystGet :<|>
       coerce stateElectionOfficeGet :<|>
       coerce candidateCandidateIdFilingsGet :<|>
       coerce committeeCommitteeIdFilingsGet :<|>
       coerce filingsGet :<|>
       coerce operationsLogGet :<|>
       coerce committeeCommitteeIdReportsGet :<|>
       coerce committeeCommitteeIdTotalsGet :<|>
       coerce electionsGet :<|>
       coerce electionsSearchGet :<|>
       coerce electionsSummaryGet :<|>
       coerce reportsCommitteeTypeGet :<|>
       coerce totalsByEntityGet :<|>
       coerce totalsCommitteeTypeGet :<|>
       coerce committeeCommitteeIdSchedulesScheduleEByCandidateGet :<|>
       coerce schedulesScheduleEByCandidateGet :<|>
       coerce schedulesScheduleEEfileGet :<|>
       coerce schedulesScheduleEGet :<|>
       coerce legalSearchGet :<|>
       coerce schedulesScheduleCGet :<|>
       coerce schedulesScheduleCSubIdGet :<|>
       coerce schedulesScheduleFGet :<|>
       coerce schedulesScheduleFSubIdGet :<|>
       coerce committeeCommitteeIdSchedulesScheduleAByEmployerGet :<|>
       coerce committeeCommitteeIdSchedulesScheduleAByOccupationGet :<|>
       coerce committeeCommitteeIdSchedulesScheduleABySizeGet :<|>
       coerce committeeCommitteeIdSchedulesScheduleAByStateGet :<|>
       coerce committeeCommitteeIdSchedulesScheduleAByZipGet :<|>
       coerce schedulesScheduleAByEmployerGet :<|>
       coerce schedulesScheduleAByOccupationGet :<|>
       coerce schedulesScheduleABySizeByCandidateGet :<|>
       coerce schedulesScheduleABySizeGet :<|>
       coerce schedulesScheduleAByStateByCandidateGet :<|>
       coerce schedulesScheduleAByStateGet :<|>
       coerce schedulesScheduleAByStateTotalsGet :<|>
       coerce schedulesScheduleAByZipGet :<|>
       coerce schedulesScheduleAEfileGet :<|>
       coerce schedulesScheduleAGet :<|>
       coerce schedulesScheduleASubIdGet :<|>
       coerce namesCandidatesGet :<|>
       coerce namesCommitteesGet)
